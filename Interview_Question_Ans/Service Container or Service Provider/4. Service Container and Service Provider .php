<?php

/*
===============================================================================
LARAVEL SERVICE CONTAINER ‡¶è‡¶¨‡¶Ç SERVICE PROVIDER - ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ
===============================================================================

SERVICE CONTAINER ‡¶ï‡¶ø?
----------------------
Service Container ‡¶π‡¶≤‡ßã Laravel ‡¶è‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø powerful IoC (Inversion of Control) container‡•§
‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ï‡ßç‡¶∏ ‡¶¨‡¶æ ‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶á‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶Æ‡¶∞‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ services ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡¶æ‡¶ñ‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶®‡¶ø‡¶á‡•§

SERVICE PROVIDER ‡¶ï‡¶ø?
--------------------
Service Provider ‡¶π‡¶≤‡ßã Laravel application ‡¶è‡¶∞ central place ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶¨ services bind ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡•§
‡¶è‡¶ü‡¶ø ‡¶¨‡¶≤‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶® Laravel ‡¶è‡¶∞ bootstrap center‡•§

‡¶ï‡ßá‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶ø?
-----------------
1. Dependency Management - ‡¶®‡¶ø‡¶∞‡ßç‡¶≠‡¶∞‡¶§‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£
2. Loose Coupling - ‡¶∂‡¶ø‡¶•‡¶ø‡¶≤ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó  
3. Easy Testing - ‡¶∏‡¶π‡¶ú ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ
4. Code Reusability - ‡¶ï‡ßã‡¶° ‡¶™‡ßÅ‡¶®‡¶∞‡ßç‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
*/

// ===============================================================================
// ‡ßß. SERVICE CONTAINER ‡¶è‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶ß‡¶æ‡¶∞‡¶£‡¶æ
// ===============================================================================

/*
SERVICE CONTAINER ALGORITHM:
---------------------------
1. Register Phase (‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º)
   - Services ‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá container ‡¶è bind ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º
   - Interface to Implementation mapping ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º

2. Resolution Phase (‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º)  
   - ‡¶Ø‡¶ñ‡¶® service ‡¶ö‡¶æ‡¶á, container dependency graph ‡¶¨‡¶æ‡¶®‡¶æ‡¶Ø‡¶º
   - Automatically dependencies inject ‡¶ï‡¶∞‡ßá
   - Object ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá return ‡¶ï‡¶∞‡ßá

CONTAINER ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú‡ßá‡¶∞ ‡¶ß‡¶æ‡¶™:
1. bind() - service register ‡¶ï‡¶∞‡¶æ
2. resolve() - service ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ  
3. make() - object ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
4. singleton() - ‡¶è‡¶ï‡¶ü‡¶ø instance ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
*/

// Container ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá ‡¶è‡¶≠‡¶æ‡¶¨‡ßá:
class SimpleContainer 
{
    private $bindings = [];
    private $instances = [];

    // STEP 1: Service bind ‡¶ï‡¶∞‡¶æ (‡¶ï‡¶ø ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶ø ‡¶¨‡¶æ‡¶®‡¶æ‡¶¨‡ßã)
    public function bind($abstract, $concrete)
    {
        echo "üîó Binding ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: $abstract -> " . (is_string($concrete) ? $concrete : 'Closure') . "\n";
        $this->bindings[$abstract] = $concrete;
    }

    // STEP 2: Singleton bind ‡¶ï‡¶∞‡¶æ (‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶∞‡¶æ‡¶ñ‡¶æ)  
    public function singleton($abstract, $concrete)
    {
        echo "üîí Singleton Binding: $abstract\n";
        $this->bind($abstract, $concrete);
    }

    // STEP 3: Service resolve ‡¶ï‡¶∞‡¶æ (‡¶ö‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ)
    public function resolve($abstract)
    {
        echo "üîç Resolving: $abstract\n";
        
        // Singleton check
        if (isset($this->instances[$abstract])) {
            echo "‚ú® Singleton instance return ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá\n";
            return $this->instances[$abstract];
        }

        // Binding ‡¶•‡ßá‡¶ï‡ßá concrete ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
        $concrete = $this->bindings[$abstract] ?? $abstract;

        // Object ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
        if ($concrete instanceof Closure) {
            $object = $concrete($this);
        } else {
            $object = $this->build($concrete);
        }

        // Singleton ‡¶π‡¶≤‡ßá store ‡¶ï‡¶∞‡¶æ
        if ($this->isSingleton($abstract)) {
            $this->instances[$abstract] = $object;
        }

        return $object;
    }

    // STEP 4: Object build ‡¶ï‡¶∞‡¶æ (Constructor dependency inject ‡¶∏‡¶π)
    private function build($concrete)
    {
        echo "üèóÔ∏è Building: $concrete\n";
        
        $reflector = new ReflectionClass($concrete);
        $constructor = $reflector->getConstructor();

        // Constructor ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø object return
        if (is_null($constructor)) {
            return new $concrete;
        }

        // Constructor ‡¶è‡¶∞ parameters ‡¶ó‡ßÅ‡¶≤‡ßã resolve ‡¶ï‡¶∞‡¶æ
        $dependencies = [];
        foreach ($constructor->getParameters() as $parameter) {
            $dependencies[] = $this->resolveDependency($parameter);
        }

        return $reflector->newInstanceArgs($dependencies);
    }

    // Dependency resolve ‡¶ï‡¶∞‡¶æ  
    private function resolveDependency($parameter)
    {
        $type = $parameter->getType();
        if ($type && !$type->isBuiltin()) {
            echo "üì¶ Dependency resolve: " . $type->getName() . "\n";
            return $this->resolve($type->getName());
        }
        
        // Default value ‡¶¨‡¶æ null return
        return $parameter->isDefaultValueAvailable() ? $parameter->getDefaultValue() : null;
    }

    private function isSingleton($abstract)
    {
        // Simplified singleton check
        return isset($this->bindings[$abstract]);
    }
}

// ===============================================================================
// ‡ß®. SERVICE PROVIDER ‡¶è‡¶∞ structure ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßá‡¶® register() ‡¶ì boot() ‡¶¶‡ßÅ‡¶ü‡ßã method
// ===============================================================================

/*
SERVICE PROVIDER LIFECYCLE:
---------------------------
1. REGISTER PHASE (‡¶®‡¶ø‡¶¨‡¶®‡ßç‡¶ß‡¶® ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º)
   - ‡¶∏‡¶¨ service providers ‡¶è‡¶∞ register() method call ‡¶π‡¶Ø‡¶º
   - Services container ‡¶è bind ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º  
   - ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ binding ‡¶ï‡¶∞‡¶ø, ‡¶ï‡ßã‡¶® service use ‡¶ï‡¶∞‡¶ø ‡¶®‡¶æ

2. BOOT PHASE (‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º)  
   - ‡¶∏‡¶¨ providers register ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ boot() call ‡¶π‡¶Ø‡¶º
   - ‡¶è‡¶ñ‡¶æ‡¶®‡ßá registered services use ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø
   - Configuration, Event listeners setup ‡¶ï‡¶∞‡¶ø

‡¶ï‡ßá‡¶® ‡¶¶‡ßÅ‡¶ü‡ßã method ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ?
-----------------------
register() - ‡¶∂‡ßÅ‡¶ß‡ßÅ services register ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
boot() - registered services use ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

‡¶Ø‡¶¶‡¶ø register() ‡¶è ‡¶Ö‡¶®‡ßç‡¶Ø service use ‡¶ï‡¶∞‡¶ø ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶∏‡ßá‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã register ‡¶π‡¶Ø‡¶º‡¶®‡¶ø ‡¶§‡¶æ‡¶á error ‡¶Ü‡¶∏‡¶¨‡ßá‡•§
*/

// Base Service Provider class ‡¶è‡¶∞ structure
abstract class BaseServiceProvider
{
    protected $app;

    public function __construct($app)
    {
        $this->app = $app;
        echo "üéØ ServiceProvider created\n";
    }

    // REGISTER METHOD - Services bind ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    abstract public function register();

    // BOOT METHOD - Services use ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø  
    public function boot() 
    {
        echo "üöÄ ServiceProvider booted\n";
        // Override ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá child class ‡¶è
    }
}

// ===============================================================================
// ‡ß©. ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ SERVICE PROVIDER ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£
// ===============================================================================

// Email Service Interface
interface EmailServiceInterface 
{
    public function send(string $to, string $subject, string $message): bool;
}

// SMTP Email Service Implementation
class SMTPEmailService implements EmailServiceInterface
{
    private $config;

    public function __construct(array $config = [])
    {
        $this->config = $config;
        echo "üìß SMTPEmailService ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá\n";
        echo "Configuration: " . json_encode($config) . "\n";
    }

    public function send(string $to, string $subject, string $message): bool
    {
        echo "üì§ SMTP ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá Email ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá:\n";
        echo "To: $to\n";
        echo "Subject: $subject\n"; 
        echo "Message: $message\n";
        return true;
    }
}

// Log Service
class LogService 
{
    private $logFile;

    public function __construct(string $logFile = 'app.log')
    {
        $this->logFile = $logFile;
        echo "üìù LogService ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá - File: $logFile\n";
    }

    public function info(string $message)
    {
        echo "‚ÑπÔ∏è LOG: $message\n";
    }

    public function error(string $message)  
    {
        echo "‚ùå ERROR LOG: $message\n";
    }
}

// User Service ‡¶Ø‡ßá‡¶ü‡¶ø EmailService ‡¶è‡¶¨‡¶Ç LogService ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá
class UserService
{
    private $emailService;
    private $logService;

    public function __construct(EmailServiceInterface $emailService, LogService $logService)
    {
        $this->emailService = $emailService;
        $this->logService = $logService;
        echo "üë§ UserService ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá\n";
    }

    public function createUser(string $name, string $email): array
    {
        // User ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
        $user = ['id' => rand(1, 1000), 'name' => $name, 'email' => $email];
        
        // Welcome email ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        $this->emailService->send($email, '‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!', "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã $name, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ account ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!");
        
        // Log ‡¶ï‡¶∞‡¶æ
        $this->logService->info("User ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: $name ($email)");
        
        return $user;
    }
}

// ===============================================================================  
// ‡ß™. SERVICE PROVIDER ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ - REGISTER ‡¶è‡¶¨‡¶Ç BOOT ‡¶è‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
// ===============================================================================

class EmailServiceProvider extends BaseServiceProvider
{
    /*
    REGISTER METHOD ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú:
    -----------------------
    1. Services ‡¶ó‡ßÅ‡¶≤‡ßã‡¶ï‡ßá container ‡¶è bind ‡¶ï‡¶∞‡¶æ
    2. Interface to Implementation mapping
    3. Configuration setup ‡¶ï‡¶∞‡¶æ
    4. ‡¶ï‡ßã‡¶® service ‡¶è‡¶ñ‡¶æ‡¶®‡ßá use ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ (‡¶è‡¶ñ‡¶®‡ßã ‡¶∏‡¶¨ register ‡¶π‡¶Ø‡¶º‡¶®‡¶ø)
    
    PARAMETERS EXPLANATION:
    ----------------------
    $this->app - ‡¶è‡¶ü‡¶ø Service Container instance
    bind() - Simple binding ‡¶ï‡¶∞‡ßá (‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® instance)
    singleton() - Singleton binding (‡¶è‡¶ï‡¶ü‡¶ø instance ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)
    when() - Contextual binding (‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ implementation)
    */
    public function register()
    {
        echo "\nüîß EmailServiceProvider REGISTER ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n";
        
        // SIMPLE BINDING - ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶¨‡¶æ‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® instance ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶¨‡ßá
        $this->app->bind(EmailServiceInterface::class, function($app) {
            echo "üè≠ EmailService ‡¶è‡¶∞ ‡¶®‡¶§‡ßÅ‡¶® instance ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá\n";
            
            // Configuration array ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
            $config = [
                'host' => 'smtp.gmail.com',
                'port' => 587,
                'username' => 'test@gmail.com',
                'password' => 'password'
            ];
            
            return new SMTPEmailService($config);
        });

        // SINGLETON BINDING - ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá ‡¶∏‡¶¨‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø same instance  
        $this->app->singleton(LogService::class, function($app) {
            echo "üîí LogService Singleton ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá\n";
            return new LogService('storage/logs/laravel.log');
        });

        // USER SERVICE BINDING - ‡¶Ö‡¶®‡ßç‡¶Ø services depend ‡¶ï‡¶∞‡ßá
        $this->app->bind(UserService::class, function($app) {
            echo "üë• UserService ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá dependencies ‡¶∏‡¶π\n";
            
            // Container ‡¶•‡ßá‡¶ï‡ßá dependencies resolve ‡¶ï‡¶∞‡¶æ
            $emailService = $app->make(EmailServiceInterface::class);
            $logService = $app->make(LogService::class);
            
            return new UserService($emailService, $logService);
        });

        echo "‚úÖ ‡¶∏‡¶¨ services REGISTER ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá\n";
    }

    /*
    BOOT METHOD ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú:
    -------------------  
    1. ‡¶∏‡¶¨ services register ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶ö‡¶≤‡ßá
    2. ‡¶è‡¶ñ‡¶æ‡¶®‡ßá registered services use ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø
    3. Event listeners, middleware register ‡¶ï‡¶∞‡¶ø
    4. Additional configuration ‡¶ï‡¶∞‡¶ø
    
    ‡¶ï‡ßá‡¶® BOOT ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ?
    ----------------
    register() ‡¶è ‡¶Ø‡¶¶‡¶ø ‡¶ï‡ßã‡¶® service use ‡¶ï‡¶∞‡¶ø ‡¶Ø‡ßá‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã register ‡¶π‡¶Ø‡¶º‡¶®‡¶ø 
    ‡¶§‡¶æ‡¶π‡¶≤‡ßá error ‡¶Ü‡¶∏‡¶¨‡ßá‡•§ ‡¶§‡¶æ‡¶á boot() ‡¶è ‡¶∏‡¶¨ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø‡•§
    */
    public function boot()
    {
        echo "\nüöÄ EmailServiceProvider BOOT ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n";
        
        // ‡¶è‡¶ñ‡¶® registered services use ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø
        $logService = $this->app->make(LogService::class);
        $logService->info('EmailServiceProvider boot ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');
        
        // Configuration publish ‡¶ï‡¶∞‡¶æ (Laravel ‡¶è)
        // $this->publishes([
        //     __DIR__.'/config/email.php' => config_path('email.php'),
        // ]);
        
        echo "‚úÖ EmailServiceProvider boot ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®\n";
    }
}

// ===============================================================================
// ‡ß´. APP.PHP ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã Application Bootstrap ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏
// ===============================================================================

/*
APP.PHP ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú:
---------------
1. Service Container ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
2. Service Providers register ‡¶ï‡¶∞‡¶æ  
3. Providers boot ‡¶ï‡¶∞‡¶æ
4. Application ready ‡¶ï‡¶∞‡¶æ

Laravel ‡¶è‡¶∞ config/app.php ‡¶è 'providers' array ‡¶è ‡¶∏‡¶¨ Service Providers list ‡¶•‡¶æ‡¶ï‡ßá‡•§
Application boot ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶á providers ‡¶ó‡ßÅ‡¶≤‡ßã load ‡¶π‡¶Ø‡¶º‡•§
*/

class Application 
{
    private $container;
    private $providers = [];
    private $bootedProviders = [];

    public function __construct()
    {
        echo "\nüèÅ Application ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n";
        
        // Service Container ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
        $this->container = new SimpleContainer();
        
        // ‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá container ‡¶è bind ‡¶ï‡¶∞‡¶æ
        $this->container->singleton('app', function() {
            return $this;
        });
        
        echo "‚úÖ Service Container ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá\n";
    }

    /*
    SERVICE PROVIDERS REGISTER ‡¶ï‡¶∞‡¶æ‡¶∞ ALGORITHM:
    ------------------------------------------
    1. Provider class instantiate ‡¶ï‡¶∞‡¶æ
    2. register() method call ‡¶ï‡¶∞‡¶æ  
    3. Provider list ‡¶è ‡¶∞‡¶æ‡¶ñ‡¶æ boot ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    */
    public function registerProvider($providerClass)
    {
        echo "\nüìã Provider register ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: $providerClass\n";
        
        // Provider instance ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
        $provider = new $providerClass($this->container);
        
        // Register method call ‡¶ï‡¶∞‡¶æ
        $provider->register();
        
        // Provider list ‡¶è ‡¶∞‡¶æ‡¶ñ‡¶æ boot ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
        $this->providers[] = $provider;
        
        echo "‚úÖ $providerClass register ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®\n";
    }

    /*
    SERVICE PROVIDERS BOOT ‡¶ï‡¶∞‡¶æ‡¶∞ ALGORITHM:
    --------------------------------------
    1. ‡¶∏‡¶¨ providers register ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶™‡¶∞ boot ‡¶∂‡ßÅ‡¶∞‡ßÅ
    2. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø provider ‡¶è‡¶∞ boot() method call ‡¶ï‡¶∞‡¶æ
    3. Booted providers list ‡¶è ‡¶∞‡¶æ‡¶ñ‡¶æ
    */
    public function bootProviders()
    {
        echo "\nüöÄ ‡¶∏‡¶¨ Providers BOOT ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n";
        
        foreach ($this->providers as $provider) {
            if (!in_array($provider, $this->bootedProviders)) {
                $provider->boot();
                $this->bootedProviders[] = $provider;
            }
        }
        
        echo "‚úÖ ‡¶∏‡¶¨ Providers BOOT ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®\n";
    }

    // Service resolve ‡¶ï‡¶∞‡¶æ‡¶∞ method
    public function make($abstract)
    {
        return $this->container->resolve($abstract);
    }

    // Application ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ
    public function run()
    {
        echo "\nüéØ Application ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶∏‡ßç‡¶§‡ßÅ‡¶§!\n";
        echo "‡¶è‡¶ñ‡¶® ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã service use ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§\n\n";
    }
}

// ===============================================================================
// ‡ß¨. CONFIG/APP.PHP ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã Configuration
// ===============================================================================

/*
Laravel ‡¶è‡¶∞ config/app.php file ‡¶è ‡¶Ø‡ßá‡¶≠‡¶æ‡¶¨‡ßá providers array ‡¶•‡¶æ‡¶ï‡ßá:

'providers' => [
    // Laravel Framework Service Providers...
    Illuminate\Auth\AuthServiceProvider::class,
    Illuminate\Broadcasting\BroadcastServiceProvider::class,
    
    // Application Service Providers...
    App\Providers\AppServiceProvider::class,
    App\Providers\EmailServiceProvider::class,
],

‡¶è‡¶á array ‡¶•‡ßá‡¶ï‡ßá Application bootstrap ‡¶∏‡¶Æ‡¶Ø‡¶º providers load ‡¶ï‡¶∞‡ßá‡•§
*/

class AppConfig
{
    public static function getProviders()
    {
        return [
            // ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø Service Providers
            EmailServiceProvider::class,
            // ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø providers ‡¶è‡¶ñ‡¶æ‡¶®‡ßá add ‡¶ï‡¶∞‡¶¨‡ßá‡¶®
        ];
    }
}

// ===============================================================================
// ‡ß≠. ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ BOOTSTRAP PROCESS - Laravel ‡¶è‡¶∞ ‡¶Æ‡¶§‡ßã
// ===============================================================================

echo "\n" . str_repeat("=", 80) . "\n";
echo "üöÄ LARAVEL BOOTSTRAP PROCESS SIMULATION üöÄ\n"; 
echo str_repeat("=", 80) . "\n";

// STEP 1: Application ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
$app = new Application();

// STEP 2: Service Providers register ‡¶ï‡¶∞‡¶æ (config/app.php ‡¶•‡ßá‡¶ï‡ßá)
echo "\nüìã REGISTRATION PHASE ‡¶∂‡ßÅ‡¶∞‡ßÅ...\n";
$providers = AppConfig::getProviders();

foreach ($providers as $providerClass) {
    $app->registerProvider($providerClass);
}
echo "\n‚úÖ ‡¶∏‡¶¨ providers REGISTER ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®!\n";

// STEP 3: Providers boot ‡¶ï‡¶∞‡¶æ  
$app->bootProviders();

// STEP 4: Application ready
$app->run();

// ===============================================================================
// ‡ßÆ. SERVICES ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£
// ===============================================================================

echo str_repeat("-", 80) . "\n";
echo "üìù SERVICES ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:\n";
echo str_repeat("-", 80) . "\n";

// UserService resolve ‡¶ï‡¶∞‡¶æ - Container automatically ‡¶∏‡¶¨ dependencies inject ‡¶ï‡¶∞‡¶¨‡ßá
echo "\nüîç UserService resolve ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n";
$userService = $app->make(UserService::class);

echo "\nüë§ User ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n";
$user = $userService->createUser('‡¶∞‡¶π‡¶ø‡¶Æ ‡¶â‡¶¶‡ßç‡¶¶‡¶ø‡¶®', 'rahim@example.com');

echo "\n‚ú® ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ User:\n";
print_r($user);

// ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ services ‡¶ì resolve ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø
echo "\nüìß Email Service ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ‡¶≠‡¶æ‡¶¨‡ßá resolve:\n";
$emailService = $app->make(EmailServiceInterface::class);
$emailService->send('karim@example.com', 'Test', '‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø test email');

echo "\nüìù Log Service ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ‡¶≠‡¶æ‡¶¨‡ßá resolve:\n";  
$logService = $app->make(LogService::class);
$logService->info('Application ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá');

// ===============================================================================
// ‡ßØ. DEPENDENCY INJECTION ‡¶è‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
// ===============================================================================

echo "\n" . str_repeat("=", 80) . "\n";
echo "üí° DEPENDENCY INJECTION ‡¶è‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ:\n";
echo str_repeat("=", 80) . "\n";

/*
‡ßß. LOOSE COUPLING (‡¶∂‡¶ø‡¶•‡¶ø‡¶≤ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó):
--------------------------------
UserService EmailServiceInterface depend ‡¶ï‡¶∞‡ßá, concrete class ‡¶è ‡¶®‡¶æ‡•§
‡¶§‡¶æ‡¶á implementation ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶≤‡ßá UserService change ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶®‡¶æ‡•§

‡ß®. EASY TESTING (‡¶∏‡¶π‡¶ú ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ):  
-------------------------------
Test ‡¶è Mock EmailService inject ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§

‡ß©. SINGLE RESPONSIBILITY (‡¶è‡¶ï‡¶ï ‡¶¶‡¶æ‡¶Ø‡¶º‡¶ø‡¶§‡ßç‡¶¨):
---------------------------------------
‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø class ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§

‡ß™. CONFIGURATION MANAGEMENT:
---------------------------
‡¶∏‡¶¨ configuration ‡¶è‡¶ï ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ‡¶Ø‡¶º (Service Provider ‡¶è)‡•§
*/

// Mock Email Service for Testing
class MockEmailService implements EmailServiceInterface
{
    public function send(string $to, string $subject, string $message): bool
    {
        echo "üß™ MOCK: Email ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ simulation - $to\n";
        return true;
    }
}

// Testing ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Mock service bind ‡¶ï‡¶∞‡¶æ
echo "\nüß™ Testing ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø Mock Service bind:\n";
$app->container->bind(EmailServiceInterface::class, function() {
    return new MockEmailService();
});

$testUserService = $app->make(UserService::class);
$testUser = $testUserService->createUser('Test User', 'test@example.com');

echo "\n" . str_repeat("=", 80) . "\n";
echo "üéâ LARAVEL SERVICE CONTAINER ‡¶ì SERVICE PROVIDER COMPLETE! üéâ\n";
echo str_repeat("=", 80) . "\n";

/*
===============================================================================
‡¶∏‡¶æ‡¶∞‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡ßá‡¶™ - ALGORITHM ‡¶ì KEY POINTS:
===============================================================================

SERVICE CONTAINER ALGORITHM:
1. bind() - Service register ‡¶ï‡¶∞‡¶æ
2. resolve() - Dependencies ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ  
3. build() - Constructor dependencies inject ‡¶ï‡¶∞‡ßá object ‡¶§‡ßà‡¶∞‡¶ø
4. return - Ready object return ‡¶ï‡¶∞‡¶æ

SERVICE PROVIDER LIFECYCLE:
1. register() - Services bind ‡¶ï‡¶∞‡¶æ (‡¶Ö‡¶®‡ßç‡¶Ø service use ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ)
2. boot() - Services use ‡¶ï‡¶∞‡¶æ (‡¶∏‡¶¨ service ‡¶è‡¶ñ‡¶® available)

APP.PHP ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶ú:
1. Providers array define ‡¶ï‡¶∞‡¶æ
2. Application bootstrap ‡¶∏‡¶Æ‡¶Ø‡¶º providers load ‡¶ï‡¶∞‡¶æ

‡¶ï‡ßá‡¶® ‡¶è‡¶á ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø?
1. Loose Coupling - Classes ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ
2. Easy Testing - Mock dependencies inject ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º
3. Maintainable Code - Change ‡¶∏‡¶π‡¶ú
4. Reusable Services - Services ‡¶™‡ßÅ‡¶®‡¶∞‡ßç‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø
5. Centralized Configuration - Configuration ‡¶è‡¶ï ‡¶ú‡¶æ‡¶Ø‡¶º‡¶ó‡¶æ‡¶Ø‡¶º

BOOT ‡¶ï‡ßá‡¶® ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ?
register() ‡¶è ‡¶Ö‡¶®‡ßç‡¶Ø service use ‡¶ï‡¶∞‡¶≤‡ßá error ‡¶ï‡¶æ‡¶∞‡¶£ ‡¶∏‡ßá‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã register ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§
boot() ‡¶è ‡¶∏‡¶¨ service available ‡¶§‡¶æ‡¶á safely use ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§
===============================================================================
*/
